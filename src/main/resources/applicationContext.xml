<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	
	<!-- 配置整合mybatis过程 -->
	<!-- 1.配置数据库相关参数properties的属性：${url} -->
	<!-- <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" order="1"/> -->
	<bean id="configBean" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="fileEncoding">
        <value>UTF-8</value>
    </property>
    <property name="locations">   
       <list>   
            <value>classpath:jdbc.properties</value>
            <value>classpath:redis.properties</value>  
        </list>   
    </property>  
    </bean>
    <!-- <bean id="PropertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="order" value="1" />  
        <property name="ignoreUnresolvablePlaceholders" value="true" />  
        <property name="locations">  
          <list> 
            读取src目录的db.properties文件 
            <value>classpath:jdbc.properties</value> 
            读取src目录的redis-config.properties文件  
            <value>classpath:redis.properties</value>  
          </list>  
        </property>  
    </bean> -->
    
    <context:component-scan base-package="com.lightingshop.*" />
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!-- 2.数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<!-- 配置连接池属性 -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

	</bean>
	
	<!-- 3.配置SqlSessionFactory对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 扫描entity包 使用别名 -->
		<property name="typeAliasesPackage" value="com.lightingshop.entity" />
		<!-- 扫描sql配置文件:mapper需要的xml文件 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml" />		
	</bean>
	
	<!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- 给出需要扫描Dao接口包 -->
		<property name="basePackage" value="com.lightingshop.dao" />
	</bean>
	
	
	<!-- 扫描service包下所有使用注解的类型 -->
	<context:component-scan base-package="com.lightingshop.service" />
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置基于注解的声明式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	
	<!-- 配置SpringMVC -->
	<!-- 1.开启SpringMVC注解模式 -->
	<!-- 简化配置： 
		(1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter 
		(2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持 
	-->
	<mvc:annotation-driven />
	
	<!-- 2.静态资源默认servlet配置
		(1)加入对静态资源的处理：js,gif,png
		(2)允许使用"/"做整体映射
	-->
	<mvc:default-servlet-handler />
	
	<!-- 3.配置jsp 显示ViewResolver -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/view/" />
		<property name="suffix" value=".html" />
	</bean>
	
	<!-- 4.扫描web相关的bean -->
	<context:component-scan base-package="com.lightingshop.web" />
	
	<!-- 扫描包下JavaBean的注解 -->
	<context:component-scan base-package="com.lightingshop.entity" />
	<context:component-scan base-package="com.lightingshop.dto" />
	
	<!-- 配置拦截器 -->
<!-- 	<mvc:interceptors>
	   <mvc:interceptor>
	       <mvc:mapping path="/*"/>
	       <mvc:mapping path="/index.html"/>	         
	       <bean class="com.lightingshop.interceptor.LoginInterceptor"></bean>
	   </mvc:interceptor>
	</mvc:interceptors> -->
	
	<!-- 配置上传文件解析器 -->
    <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize">
            <value>10485760</value>
        </property>
        <property name="maxInMemorySize" value="40960"/>
    </bean>
	
</beans>
